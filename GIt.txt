一、基本术语
Workspace：工作区，本地文件及相关文件夹
Index / Stage：暂存区
Repository：仓库区（或本地仓库），.git文件夹（包括暂存区stage,还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD等等）
Remote：远程仓库，GitHub账户的相关文件在git服务器或某一可以多名开发人员同时访问的服务器


二、本地已有文件与远程仓库连接
（1）注册GitHub账户
（2）运行：ssh-keygen -t rsa –C “youremail@example.com”，生成.ssh文件夹，包括：id_rsa（私钥，不能泄露出去），id_rsa.pub（公钥，可以放心地告诉任何人）
（3）登录github，打开”settings”中的SSH Keys页面，,填上Title，在Key文本框里黏贴id_rsa.pub文件的内容（查看方法：在文件所在位置运行more id_rsa.pub）,然后点击“Add SSH Key”
（4）创建一个空仓库，复制仓库地址
（5）运行git remote add origin https://github......
（6）git push -f origin master
（7）输入用户名及密码

三、远程仓库克隆到本地仓库
git clone https://github......（仓库网址）

四、命令速查
git init                    初始化当前文件夹
git add filename            将filename文件添加到暂存区
git commit -m 'comment'     将暂存区文件提交到本地仓库，并添加修改说明：comment
git status                  查看暂存区里面是否有未提交到仓库的新文件（Changes to be committed：new file）或修改（Changes to be committed：modified）、
                            查看工作区文件是否有未提交到仓库的文件（Untracked files）或未提交的修改（Changes not staged for commit）
git diff filename           查看filename文件与仓库文件有什么不同，新文件、暂存区文件无法查看
git log                     查看当前文件夹仓库区的提交记录、不显示退回版本记录
git log –-pretty=oneline    查看当前文件夹仓库区的提交记录（每条记录只显示为一行：版本号 提交评论）
git reset --hard HEAD^      退回到前n个版本（n：^的数量，或者git reset --hard HEAD~n）
git reflog                  查看所有版本修改记录以及版本号
git reset --hard 版本号     可以回到任何一个历史版本（此操作可以撤销回退旧版本操作）    
git checkout --filename     撤销filename文件工作区中的修改，如果暂存区没有该文件的版本，则本地文件恢复到仓库文件版本；若有，则恢复到暂存区的版本


分支
git branch name                                 创建分支name
git checkout branchname                         切换到branchname分支
git checkout -b branchname                      创建并切换到branchname分支
git branch                                      查看分支
git merge branchname                            将branchname分支分支合并到当前分支
git branch –d name                              删除分支
git merge –no-ff -m '注释' branchname           合并分支，禁用Faste Forward模式，使删除相应分支后保留相关记录log


bug分支-git stash
/*
1 当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，
  然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。
2 由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可
*/
git stash                                       将未提交的修改保存到堆栈中，先进后出
git stash save 'comment'                        同上，多了评论
git stash list                                  查看当前stash中的内容
git stash pop                                   将当前stash中栈顶内容弹出，并应用到当前分支对应的工作目录上，并将内容删除（栈是先进后出）
git stash apply                                 当前stash中栈顶内容应用到当前分支对应的工作目录上，不删除
git stash drop + 名称                           从堆栈中移除某个指定的stash
git stash clear                                 清清除所有stash
git stash show                                  查看堆栈中最新保存的stash和当前目录的差异
git stash branch                                从最新的stash创建分支


删除文件/恢复文件
（1）rm filename                 /*此步骤之后使用：git checkout -- filename即可恢复*/
（2）git add filename            /*此步骤之后使用：git checkout -f恢复*/
（3）git commit -m 'comment'     /*此步骤之后使用：git reset -- hard 版本号或者使用：git reset --hard HEAD^恢复*/
