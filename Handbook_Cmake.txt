一、命令
command(arg1 arg2 ...)       #运行命令
set(var_name var_value)      #定义变量或者给已经存在的变量赋值
command(arg1 ${var_value})   #使用变量

1)工程配置
cmake_minimum_required(VERSION num)   # cmake最低版本要求
project(cur_project_name)             # 项目名
set(CMAKE_CXX_FLAGS "xxx")            # 设置编译器版本，如std=c++11
set(CMAKE_BUILD_TYPE "xxx")           # 指定编译模式，DEBUG/RELEASE

2)依赖执行部分
find_package(std_lib_name VERSION REQUIRED)        # 引入外部依赖
add_library(<name> [lib_tyle] source)              # 生成库类型
include_directories(${srd_lib_name_INCLUDE_DIRS})  # 指定include路径，放在add_exectuable前面
add_exectuable(cur_project_name xxx.cpp)           # 指定生成目标
target_link_libraries(${std_lib_name_LIBRARIES})   # 指定libraries路径，放在add_exectuable后面


3)其它辅助部分
function(function_name arg)        # 定义一个函数
add_subdirectory(dir)              # 添加一个子目录
AUX_SOURCE_DIRECTORY(. SRC_LIST)   # 查找当前目录所有文件，并保存到SRX_LIST变量中
FOREACH(one_dir ${SRC_LIST})
        MESSAGE(${one_dir})        # 遍历当前目录，使用message进行打印
ENDFOREACH

4)判断控制，循环部分

5)基本常用指令
ADD_DEFINITIONS
--为源文件的编译添加由-D引入的宏定义
--ads_definitions(-Dname1 -Dname2 ...)
--例如：asd_definitions(-DWIN32)

OPTION
--提供给用户可以选择的选项
--格式：option(<variable> "description" [initial value])

ADD_CUSTOM_COMMAND/ADD_CUSTOMTARGET
--为工程添加一条自定义的构建规则
--用于给指定的目标执行指定的命令，该目标没有输出文件，并始终被构建

ADD_EPENDENCIES
--用于解决链接时依赖的问题，用target_link_libraries能解决吗？

INSTALL 
--用户定义安装规则

TARGET_INCLUDE_DIRCTORIES
--设置include文件查找目录，具体包含头文件应用形式，安装位置
--target_nclude_directories(<target>[SYSTEM][BEFORE]<INTERFACE|PUBLIC|PRIVATE> [items])

SET_TARGET_PROPERTIES
--设置目标的一些属性来改变它们构建的方式


二、常用变量
CMAKE_INSTALL_PREFIX    构建install的路径
$ENV{HOME}              HOME环境下的目录路径
PROJECT_NAME            工程名变量
<PKG>_INCLUDE_DIR       导入包头文件全路径
<PKG>_LIBRARIES         导入库文件的全路径
PROJECT_SOURCE_DIR      构建工程的全路径
CMAKE_VERSION           Cmake的版本号
CMAKE_SOURCE_DIR        源码树的顶层路径
